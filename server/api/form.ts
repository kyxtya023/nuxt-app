import { defineEventHandler, sendError, createError, readBody } from "h3";

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ chatId —Ç–∞–∫–∏–µ –∂–µ, –∫–∞–∫ –≤ –¥—Ä—É–≥–æ–º —Ñ–∞–π–ª–µ
const BOT_TOKEN = '8056475514:AAGyEDJqqy6IARz2qQ5CHD424mO3_5NaSqw';
const TELEGRAM_API_URL = `https://api.telegram.org/bot${BOT_TOKEN}`;
const chatId = 8180227527;

interface ContactInfo {
  name: string;
  phone: string;
}

export default defineEventHandler(async (event) => {
  const { name, phone }: ContactInfo = await readBody(event);

  if (!name || !phone) {
    return sendError(
      event,
      createError({ statusCode: 400, message: "–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" })
    );
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
  const formattedMessage = `
   üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞:
   üë§ –ò–º—è: ${name}
   üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
  `;

  try {
    const response = await $fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: "POST",
      body: {
        chat_id: chatId,
        text: formattedMessage,
        parse_mode: "HTML",
      },
    });

    if (response) {
      return { success: true, message: "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!" };
    } else {
      throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:", error);
    return sendError(
      event,
      createError({ statusCode: 500, message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è." })
    );
  }
});
